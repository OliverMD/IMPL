-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParM where
import AbsM
import LexM
import ErrM

}

%name pLine Line
%name pListString ListString
%name pListLine ListLine
%name pInstruction Instruction
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '
' { PT _ (TS _ 1) }
  ' blt ' { PT _ (TS _ 2) }
  ' hlt ' { PT _ (TS _ 3) }
  ' lor ' { PT _ (TS _ 4) }
  ', ' { PT _ (TS _ 5) }
  ': ' { PT _ (TS _ 6) }
  'add' { PT _ (TS _ 7) }
  'beq' { PT _ (TS _ 8) }
  'jmp' { PT _ (TS _ 9) }
  'lim' { PT _ (TS _ 10) }
  'mov' { PT _ (TS _ 11) }
  'mul' { PT _ (TS _ 12) }
  'neg' { PT _ (TS _ 13) }
  'nop' { PT _ (TS _ 14) }
  'prn' { PT _ (TS _ 15) }

L_quoted { PT _ (TL $$) }
L_integ  { PT _ (TI $$) }


%%

String  :: { String }  : L_quoted {  $1 }
Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }

Line :: { Line }
Line : ListString ': ' Instruction { AbsM.Cmd $1 $3 }
ListString :: { [String] }
ListString : {- empty -} { [] }
           | String { (:[]) $1 }
           | String ', ' ListString { (:) $1 $3 }
ListLine :: { [Line] }
ListLine : {- empty -} { [] }
         | ListLine Line '
' { flip (:) $1 $2 }
Instruction :: { Instruction }
Instruction : 'nop' { AbsM.Nop }
            | ' hlt ' { AbsM.Hlt }
            | 'lim' String Integer { AbsM.Lim $2 $3 }
            | 'mov' String String { AbsM.Mov $2 $3 }
            | 'add' String String String { AbsM.Add $2 $3 $4 }
            | 'mul' String String String { AbsM.Mul $2 $3 $4 }
            | 'neg' String String { AbsM.Neg $2 $3 }
            | 'prn' String { AbsM.Prn $2 }
            | 'jmp' String { AbsM.Jmp $2 }
            | 'beq' String String String { AbsM.Beq $2 $3 $4 }
            | ' blt ' String String String { AbsM.Blt $2 $3 $4 }
            | ' lor ' String String String { AbsM.Lor $2 $3 $4 }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

