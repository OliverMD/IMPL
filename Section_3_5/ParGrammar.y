-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParGrammar where
import AbsGrammar
import LexGrammar
import ErrM

}

%name pA A
%name pB B
%name pB1 B1
%name pB2 B2
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '(' { PT _ (TS _ 1) }
  ')' { PT _ (TS _ 2) }
  '*' { PT _ (TS _ 3) }
  '+' { PT _ (TS _ 4) }

L_integ  { PT _ (TI $$) }


%%

Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }

A :: { A }
A : A '+' A { AbsGrammar.AAdd $1 $3 }
  | A '*' A { AbsGrammar.AMul $1 $3 }
  | Integer { AbsGrammar.ANum $1 }
  | '(' A ')' { AbsGrammar.ABrk $2 }
B :: { B }
B : B '+' B1 { AbsGrammar.BAdd $1 $3 } | B1 { AbsGrammar.B01 $1 }
B1 :: { B }
B1 : B1 '*' B2 { AbsGrammar.BMul $1 $3 } | B2 { AbsGrammar.B12 $1 }
B2 :: { B }
B2 : Integer { AbsGrammar.BNum $1 }
   | '(' B ')' { AbsGrammar.BBrk $2 }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

