-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParRules where
import AbsRules
import LexRules
import ErrM

}

%name pBExp BExp
%name pBExp1 BExp1
%name pBExp2 BExp2
%name pBExp3 BExp3
%name pIntExp IntExp
%name pIntExp1 IntExp1
%name pIntExp2 IntExp2
%name pIntExp3 IntExp3
%name pIntExp4 IntExp4
%name pStmt Stmt
%name pType Type
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '(' { PT _ (TS _ 1) }
  ')' { PT _ (TS _ 2) }
  '*' { PT _ (TS _ 3) }
  '+' { PT _ (TS _ 4) }
  '-' { PT _ (TS _ 5) }
  ':' { PT _ (TS _ 6) }
  ':=' { PT _ (TS _ 7) }
  ';' { PT _ (TS _ 8) }
  '<' { PT _ (TS _ 9) }
  '=' { PT _ (TS _ 10) }
  '@' { PT _ (TS _ 11) }
  'AND' { PT _ (TS _ 12) }
  'Bool' { PT _ (TS _ 13) }
  'ELSE' { PT _ (TS _ 14) }
  'FALSE' { PT _ (TS _ 15) }
  'IF' { PT _ (TS _ 16) }
  'Int' { PT _ (TS _ 17) }
  'NOT' { PT _ (TS _ 18) }
  'PRINT' { PT _ (TS _ 19) }
  'SKIP' { PT _ (TS _ 20) }
  'THEN' { PT _ (TS _ 21) }
  'TRUE' { PT _ (TS _ 22) }
  'WHILE' { PT _ (TS _ 23) }
  '[' { PT _ (TS _ 24) }
  ']' { PT _ (TS _ 25) }

L_ident  { PT _ (TV $$) }
L_integ  { PT _ (TI $$) }


%%

Ident   :: { Ident }   : L_ident  { Ident $1 }
Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }

BExp :: { BExp }
BExp : Ident { AbsRules.BExpIdent $1 }
     | 'TRUE' { AbsRules.BExp_TRUE }
     | 'FALSE' { AbsRules.BExp_FALSE }
     | BExp '<' BExp { AbsRules.BExp1 $1 $3 }
     | BExp '=' BExp { AbsRules.BExp2 $1 $3 }
     | BExp1 { $1 }
BExp1 :: { BExp }
BExp1 : BExp 'AND' BExp { AbsRules.BAnd $1 $3 } | BExp2 { $1 }
BExp2 :: { BExp }
BExp2 : 'NOT' BExp1 { AbsRules.BNot $2 } | BExp3 { $1 }
BExp3 :: { BExp }
BExp3 : '(' BExp ')' { $2 }
IntExp :: { IntExp }
IntExp : Ident { AbsRules.IntExpIdent $1 }
       | Integer { AbsRules.IntExpInteger $1 }
       | IntExp1 { $1 }
IntExp1 :: { IntExp }
IntExp1 : IntExp '+' IntExp { AbsRules.IAdd $1 $3 }
        | IntExp2 { $1 }
IntExp2 :: { IntExp }
IntExp2 : IntExp1 '*' IntExp1 { AbsRules.IMul $1 $3 }
        | IntExp3 { $1 }
IntExp3 :: { IntExp }
IntExp3 : IntExp2 '-' IntExp2 { AbsRules.INeg $1 $3 }
        | IntExp4 { $1 }
IntExp4 :: { IntExp }
IntExp4 : '(' IntExp ')' { $2 }
Stmt :: { Stmt }
Stmt : 'SKIP' { AbsRules.SSkip }
     | Ident ':=' BExp { AbsRules.SBAss $1 $3 }
     | Ident ':=' IntExp { AbsRules.SIAss $1 $3 }
     | 'PRINT' IntExp { AbsRules.SPnt $2 }
     | Stmt ';' Stmt { AbsRules.STerm $1 $3 }
     | 'IF' BExp 'THEN' Stmt 'ELSE' Stmt { AbsRules.SIF $2 $4 $6 }
     | 'WHILE' BExp Stmt { AbsRules.SWhile $2 $3 }
     | '(' Stmt ')' { AbsRules.SParen $2 }
     | '[' Ident ':' Type '@' Stmt ']' { AbsRules.SBlock $2 $4 $6 }
Type :: { Type }
Type : 'Int' { AbsRules.TInt } | 'Bool' { AbsRules.TBool }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

