module SkelRules where

-- Haskell module generated by the BNF converter

import AbsRules
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transPIdent :: PIdent -> Result
transPIdent x = case x of
  PIdent string -> failure x
transBExp :: BExp -> Result
transBExp x = case x of
  BExpPIdent pident -> failure x
  BExp_TRUE -> failure x
  BExp_FALSE -> failure x
  BExp1 bexp1 bexp2 -> failure x
  BExp2 bexp1 bexp2 -> failure x
  BAnd bexp1 bexp2 -> failure x
  BNot bexp -> failure x
transIntExp :: IntExp -> Result
transIntExp x = case x of
  IntExpPIdent pident -> failure x
  IntExpInteger integer -> failure x
  IAdd intexp1 intexp2 -> failure x
  IMul intexp1 intexp2 -> failure x
  INeg intexp1 intexp2 -> failure x
transStmt :: Stmt -> Result
transStmt x = case x of
  SSkip -> failure x
  SBAss pident bexp -> failure x
  SIAss pident intexp -> failure x
  SPnt intexp -> failure x
  STerm stmt1 stmt2 -> failure x
  SIF bexp stmt1 stmt2 -> failure x
  SWhile bexp stmt -> failure x
  SParen stmt -> failure x
  SBlock pident type_ stmt -> failure x
transType :: Type -> Result
transType x = case x of
  TInt -> failure x
  TBool -> failure x

