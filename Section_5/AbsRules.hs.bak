

module AbsRules where

-- Haskell module generated by the BNF converter




newtype Ident = Ident String deriving (Eq, Ord, Show, Read)
data BExp
    = BExpIdent Ident
    | BExp_TRUE
    | BExp_FALSE
    | BExp1 BExp BExp
    | BExp2 BExp BExp
    | BAnd BExp BExp
    | BNot BExp
  deriving (Eq, Ord, Show, Read)

data IntExp
    = IntExpIdent Ident
    | IntExpInteger Integer
    | IAdd IntExp IntExp
    | IMul IntExp IntExp
    | INeg IntExp IntExp
  deriving (Eq, Ord, Show, Read)

data Stmt
    = Stmt_SKIP
    | Stmt1 Ident BExp
    | Stmt2 Ident IntExp
    | Stmt3 IntExp
    | Stmt4 Stmt Stmt
    | Stmt5 BExp Stmt Stmt
    | Stmt6 BExp Stmt
    | Stmt7 Stmt
  deriving (Eq, Ord, Show, Read)

