module SkelRules where

-- Haskell module generated by the BNF converter

import AbsRules
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident string -> failure x
transBExp :: BExp -> Result
transBExp x = case x of
  BExpIdent ident -> failure x
  BExp_TRUE -> failure x
  BExp_FALSE -> failure x
  BExp1 bexp1 bexp2 -> failure x
  BExp2 bexp1 bexp2 -> failure x
  BAnd bexp1 bexp2 -> failure x
  BNot bexp -> failure x
transIntExp :: IntExp -> Result
transIntExp x = case x of
  IntExpIdent ident -> failure x
  IntExpInteger integer -> failure x
  IAdd intexp1 intexp2 -> failure x
  IMul intexp1 intexp2 -> failure x
  INeg intexp1 intexp2 -> failure x
transStmt :: Stmt -> Result
transStmt x = case x of
  Stmt_SKIP -> failure x
  Stmt1 ident bexp -> failure x
  Stmt2 ident intexp -> failure x
  Stmt3 intexp -> failure x
  Stmt4 stmt1 stmt2 -> failure x
  Stmt5 bexp stmt1 stmt2 -> failure x
  Stmt6 bexp stmt -> failure x
  Stmt7 stmt -> failure x

