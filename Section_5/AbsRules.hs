

module AbsRules where

-- Haskell module generated by the BNF converter




newtype Ident = Ident String deriving (Eq, Ord, Show, Read)
data BExp
    = BExpIdent Ident
    | BExp_TRUE
    | BExp_FALSE
    | BExp1 BExp BExp
    | BExp2 BExp BExp
    | BAnd BExp BExp
    | BNot BExp
  deriving (Eq, Ord, Show, Read)

data IntExp
    = IntExpIdent Ident
    | IntExpInteger Integer
    | IAdd IntExp IntExp
    | IMul IntExp IntExp
    | INeg IntExp IntExp
  deriving (Eq, Ord, Show, Read)

data Stmt
    = SSkip
    | SBAss Ident BExp
    | SIAss Ident IntExp
    | SPnt IntExp
    | STerm Stmt Stmt
    | SIF BExp Stmt Stmt
    | SWhile BExp Stmt
    | SParen Stmt
    | SBlock Ident Type Stmt
  deriving (Eq, Ord, Show, Read)

data Type = TInt | TBool
  deriving (Eq, Ord, Show, Read)

