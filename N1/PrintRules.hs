{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}
module PrintRules where

-- pretty-printer generated by the BNF converter

import AbsRules
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else (' ':s))

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)



instance Print PIdent where
  prt _ (PIdent (_,i)) = doc (showString ( i))



instance Print BExp where
  prt i e = case e of
    BExpPIdent pident -> prPrec i 0 (concatD [prt 0 pident])
    BExp_TRUE -> prPrec i 0 (concatD [doc (showString "TRUE")])
    BExp_FALSE -> prPrec i 0 (concatD [doc (showString "FALSE")])
    BExp1 bexp1 bexp2 -> prPrec i 0 (concatD [prt 0 bexp1, doc (showString "<"), prt 0 bexp2])
    BExp2 bexp1 bexp2 -> prPrec i 0 (concatD [prt 0 bexp1, doc (showString "="), prt 0 bexp2])
    BAnd bexp1 bexp2 -> prPrec i 1 (concatD [prt 0 bexp1, doc (showString "AND"), prt 0 bexp2])
    BNot bexp -> prPrec i 2 (concatD [doc (showString "NOT"), prt 1 bexp])

instance Print IntExp where
  prt i e = case e of
    IntExpPIdent pident -> prPrec i 0 (concatD [prt 0 pident])
    IntExpInteger n -> prPrec i 0 (concatD [prt 0 n])
    IAdd intexp1 intexp2 -> prPrec i 1 (concatD [prt 0 intexp1, doc (showString "+"), prt 0 intexp2])
    IMul intexp1 intexp2 -> prPrec i 2 (concatD [prt 1 intexp1, doc (showString "*"), prt 1 intexp2])
    INeg intexp1 intexp2 -> prPrec i 3 (concatD [prt 2 intexp1, doc (showString "-"), prt 2 intexp2])

instance Print Stmt where
  prt i e = case e of
    SSkip -> prPrec i 0 (concatD [doc (showString "SKIP")])
    SBAss pident bexp -> prPrec i 0 (concatD [prt 0 pident, doc (showString ":="), prt 0 bexp])
    SIAss pident intexp -> prPrec i 0 (concatD [prt 0 pident, doc (showString ":="), prt 0 intexp])
    SPnt intexp -> prPrec i 0 (concatD [doc (showString "PRINT"), prt 0 intexp])
    STerm stmt1 stmt2 -> prPrec i 0 (concatD [prt 0 stmt1, doc (showString ";"), prt 0 stmt2])
    SIF bexp stmt1 stmt2 -> prPrec i 0 (concatD [doc (showString "IF"), prt 0 bexp, doc (showString "THEN"), prt 0 stmt1, doc (showString "ELSE"), prt 0 stmt2])
    SWhile bexp stmt -> prPrec i 0 (concatD [doc (showString "WHILE"), prt 0 bexp, prt 0 stmt])
    SParen stmt -> prPrec i 0 (concatD [doc (showString "("), prt 0 stmt, doc (showString ")")])
    SBlock pident type_ stmt -> prPrec i 0 (concatD [doc (showString "["), prt 0 pident, doc (showString ":"), prt 0 type_, doc (showString "@"), prt 0 stmt, doc (showString "]")])

instance Print Type where
  prt i e = case e of
    TInt -> prPrec i 0 (concatD [doc (showString "Int")])
    TBool -> prPrec i 0 (concatD [doc (showString "Bool")])


